<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Polished Roulette</title>
    <style>
        body {
            display: flex;
            flex-direction: row;
            justify-content: center;
            align-items: flex-start;
            background: #1a1a1a;
            color: #fff;
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            gap: 20px;
        }
        #roulette-container {
            flex: 0 0 auto;
        }
        canvas {
            border: 2px solid #d4af37;
            border-radius: 50%;
            background: #222;
        }
        #right-panel {
            flex: 0 0 auto;
            display: flex;
            flex-direction: column;
            gap: 20px;
        }
        #betting-table {
            display: grid;
            grid-template-columns: repeat(12, 45px);
            gap: 5px;
            background: #2a2a2a;
            padding: 10px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(212, 175, 55, 0.3);
        }
        .bet-option {
            background: #333;
            text-align: center;
            padding: 10px;
            border-radius: 5px;
            cursor: pointer;
            transition: background 0.2s, transform 0.1s, box-shadow 0.2s;
        }
        .bet-option:hover {
            background: #555;
            transform: scale(1.05);
        }
        .bet-option.selected {
            box-shadow: 0 0 10px #d4af37;
            background: #444;
        }
        .number { background: #444; }
        .red { background: #ff0000; color: #fff; }
        .black { background: #000000; color: #fff; }
        .green { background: #00ff00; color: #000; }
        .special { grid-column: span 4; background: #d4af37; color: #1a1a1a; }
        #game-info {
            padding: 15px;
            background: #2a2a2a;
            border-radius: 10px;
            border: 1px solid #d4af37;
            box-shadow: 0 0 15px rgba(212, 175, 55, 0.2);
            text-align: center;
        }
        #message { color: #d4af37; }
    </style>
</head>
<body>
    <div id="roulette-container">
        <canvas id="roulette" width="500" height="500"></canvas>
    </div>
    <div id="right-panel">
        <div id="betting-table"></div>
        <div id="game-info">
            <p>Balance: $<span id="balance">100</span></p>
            <p>Total Bet: $<span id="total-bet">0</span></p>
            <p id="message">Click to bet ($10), right-click to raise, Space to spin</p>
        </div>
    </div>
    <audio id="spin-sound" src="https://www.soundjay.com/buttons/spin-01.mp3" preload="auto"></audio>

    <script>
        const canvas = document.getElementById('roulette');
        const ctx = canvas.getContext('2d');
        const bettingTable = document.getElementById('betting-table');
        const balanceDisplay = document.getElementById('balance');
        const totalBetDisplay = document.getElementById('total-bet');
        const message = document.getElementById('message');
        const spinSound = document.getElementById('spin-sound');
        let balance = 100;
        let totalBet = 0;
        let angle = 0;
        let spinSpeed = 0;
        let spinning = false;
        let stopped = false;
        let winningNumber = null;
        let bets = {};
        const slots = [0, 32, 15, 19, 4, 21, 2, 25, 17, 34, 6, 27, 13, 36, 11, 30, 8, 23, 10, 5, 24, 16, 33, 1, 20, 14, 31, 9, 22, 18, 29, 7, 28, 12, 35, 3, 26];
        const redSlots = [32, 19, 21, 25, 34, 27, 36, 30, 23, 5, 16, 1, 14, 9, 18, 7, 12, 3];

        function drawWheel() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.save();
            ctx.translate(250, 250);
            ctx.rotate(angle);

            // Draw wheel
            for (let i = 0; i < 37; i++) {
                let slotAngle = (i * 2 * Math.PI) / 37;
                ctx.beginPath();
                ctx.arc(0, 0, 200, slotAngle, slotAngle + (2 * Math.PI) / 37);
                ctx.lineTo(0, 0);
                ctx.fillStyle = slots[i] === 0 ? '#00ff00' : (redSlots.includes(slots[i]) ? '#ff0000' : '#000000');
                ctx.fill();

                // Draw numbers
                ctx.save();
                ctx.rotate(slotAngle + Math.PI / 37);
                ctx.fillStyle = '#fff';
                ctx.font = '12px Arial';
                ctx.fillText(slots[i], 180, 5);
                ctx.restore();
            }

            // Center hub
            ctx.beginPath();
            ctx.arc(0, 0, 50, 0, 2 * Math.PI);
            ctx.fillStyle = '#d4af37';
            ctx.fill();
            ctx.restore();

            // Ball (appears on stop, tied to winningNumber)
            if (stopped && winningNumber !== null) {
                const slotIndex = slots.indexOf(winningNumber);
                const slotAngle = (slotIndex * 2 * Math.PI) / 37 + Math.PI / 37 - angle; // Adjust for wheel rotation
                const ballX = 250 + 180 * Math.cos(slotAngle);
                const ballY = 250 + 180 * Math.sin(slotAngle);
                ctx.beginPath();
                ctx.arc(ballX, ballY, 10, 0, 2 * Math.PI);
                ctx.fillStyle = '#fff';
                ctx.fill();
            }
        }

        function animate() {
            if (spinning) {
                angle += spinSpeed;
                spinSpeed *= 0.998;
                if (spinSpeed < 0.01) {
                    spinning = false;
                    stopped = true;
                    resolveSpin();
                }
            }
            drawWheel();
            requestAnimationFrame(animate);
        }

        // Build betting table
        for (let i = 0; i < 37; i++) {
            const div = document.createElement('div');
            div.className = `bet-option number ${slots[i] === 0 ? 'green' : (redSlots.includes(slots[i]) ? 'red' : 'black')}`;
            div.textContent = slots[i];
            div.dataset.type = 'number';
            div.dataset.value = slots[i];
            div.addEventListener('click', () => placeBet('number', slots[i], div));
            div.addEventListener('contextmenu', (e) => { e.preventDefault(); raiseBet('number', slots[i], div); });
            bettingTable.appendChild(div);
        }
        ['Red', 'Black', 'Odd', 'Even', '1-12', '13-24', '25-36'].forEach(type => {
            const div = document.createElement('div');
            div.className = `bet-option special ${type.toLowerCase()}`;
            div.textContent = type;
            div.dataset.type = type.toLowerCase().replace(' ', '');
            div.addEventListener('click', () => placeBet(type.toLowerCase().replace(' ', ''), type, div));
            div.addEventListener('contextmenu', (e) => { e.preventDefault(); raiseBet(type.toLowerCase().replace(' ', ''), type, div); });
            bettingTable.appendChild(div);
        });

        function placeBet(type, value, element) {
            if (spinning || balance < 10) return;
            const key = `${type}-${value}`;
            bets[key] = (bets[key] || 0) + 10;
            balance -= 10;
            totalBet += 10;
            balanceDisplay.textContent = balance;
            totalBetDisplay.textContent = totalBet;
            element.classList.add('selected');
            message.textContent = `Bet $${bets[key]} on ${value || type}`;
        }

        function raiseBet(type, value, element) {
            if (spinning || balance < 10) return;
            const key = `${type}-${value}`;
            if (bets[key]) {
                bets[key] += 10;
                balance -= 10;
                totalBet += 10;
                balanceDisplay.textContent = balance;
                totalBetDisplay.textContent = totalBet;
                message.textContent = `Raised to $${bets[key]} on ${value || type}`;
            }
        }

        document.addEventListener('keydown', (e) => {
            if (e.key === ' ' && !spinning && Object.keys(bets).length > 0) {
                spinSpeed = Math.random() * 0.5 + 0.5;
                spinning = true;
                stopped = false;
                winningNumber = null;
                spinSound.play();
                message.textContent = 'Spinning...';
            }
        });

        function resolveSpin() {
            const slotIndex = Math.floor((angle % (2 * Math.PI)) / ((2 * Math.PI) / 37));
            winningNumber = slots[slotIndex];
            let winnings = 0;

            Object.keys(bets).forEach(key => {
                const [type, value] = key.split('-');
                const betAmount = bets[key];
                if (type === 'number' && parseInt(value) === winningNumber) winnings += betAmount * 36;
                if (type === 'red' && redSlots.includes(winningNumber)) winnings += betAmount * 2;
                if (type === 'black' && !redSlots.includes(winningNumber) && winningNumber !== 0) winnings += betAmount * 2;
                if (type === 'odd' && winningNumber % 2 === 1) winnings += betAmount * 2;
                if (type === 'even' && winningNumber % 2 === 0 && winningNumber !== 0) winnings += betAmount * 2;
                if (type === '1-12' && winningNumber >= 1 && winningNumber <= 12) winnings += betAmount * 3;
                if (type === '13-24' && winningNumber >= 13 && winningNumber <= 24) winnings += betAmount * 3;
                if (type === '25-36' && winningNumber >= 25 && winningNumber <= 36) winnings += betAmount * 3;
            });

            balance += winnings;
            balanceDisplay.textContent = balance;
            totalBet = 0;
            totalBetDisplay.textContent = totalBet;
            message.textContent = `Landed on ${winningNumber}. Winnings: $${winnings}.`;
            bets = {};
            document.querySelectorAll('.bet-option').forEach(el => el.classList.remove('selected'));

            if (balance <= 0) message.textContent = 'Game Over!';
            if (balance >= 1000000) message.textContent = 'You’re a Millionaire!';
        }

        animate();
    </script>
</body>
</html>
